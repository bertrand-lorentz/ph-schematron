<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <title>Common Business Rules assertions</title>
  
	<ns prefix="cac" uri="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"/>
	<ns prefix="cbc" uri="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"/>
	<ns prefix="ccv-cbc" uri="urn:isa:names:specification:ubl:schema:xsd:CCV-CommonBasicComponents-1"/>
	<ns prefix="cev-cbc" uri="urn:isa:names:specification:ubl:schema:xsd:CEV-CommonBasicComponents-1"/>
	<ns prefix="cev" uri="urn:isa:names:specification:ubl:schema:xsd:CEV-CommonAggregateComponents-1"/>
	<ns prefix="ext" uri="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"/>
	<ns prefix="ccv" uri="urn:isa:names:specification:ubl:schema:xsd:CCV-CommonAggregateComponents-1"/>
	<ns prefix="espd-req" uri="urn:grow:names:specification:ubl:schema:xsd:ESPDRequest-1"/>
	<ns prefix="gc" uri="http://docs.oasis-open.org/codelist/ns/genericode/1.0/"/>
  
  <pattern id="common-br-rules">

<!--
    Start of synthesis of rules from identifiers attributes assertions.

    Illustration of codelists attributes constraints - ESPD-Common BR-rules.sch

-->

	<!-- ProcurementProjectLot / ID=0 -->
	<rule context="/espd-req:ESPDRequest/cac:ProcurementProjectLot">
		<assert test="( not(cbc:ID!='0') )">The current version of the ESPD Service does not allow for the specification of multiple lots. To ensure conformace with the current version of the ESPD Service the ID sub-element inside the element ProcurementProjectLot MUST be 0 (zero).</assert>
	</rule>

	<!-- EXCLUSION Criteria -->
	<!--xsl:variable name="exclusion_types" select="document('../../../common artefacts/gc/CriteriaTypeCode-CodeList.gc')/gc:CodeList"/--><!-- Code list of the exclusion criteria: CriteriaTypeCode-CodeList.gc -->
	<xsl:variable name="TypeCodeExclusion" select="/espd-req:ESPDRequest/ccv:Criterion/cbc:TypeCode[starts-with(., 'CRITERION.EXCLUSION.')]"/><!-- Criterias of the XML that are EXCLUSION (those started with EXCLUSION.) -->
	<rule context="/espd-req:ESPDRequest">
		
		<!-- The Codes and Identifiers inherited from UBL-2.1 used at the root of the document (e.g. UBLVersionID, CopyIndicator, etc.) are not mandatory except for the document ID and the document IssueDate. However it is recommended to keep them as in the examples generated by the ESPD Service. -->
		<assert test="( not(string(cbc:ID))=false() )">The element 'espd-req:ESPDRequest / cbc:ID' is mandatory </assert>
		
		<assert test="( not(string(cbc:IssueDate))=false() )">The element 'espd-req:ESPDRequest / cbc:IssueDate' is mandatory </assert>
		
		<!-- The element ContractFolderID is mandatory and MUST contain the reference number that the Contracting Authority issued to identify to the whole procurement project. -->
		<!--assert test="( not(string(cbc:ContractFolderID))=false() )">The element 'espd-req:ESPDRequest / cbc:ContractFolderID' is mandatory </assert-->
		
		<!-- The ESPDRequest MUST always contain one AdditionalDocumentReference element referring to the Contract Notice (CN) published in TeD (Publications Office). -->
		<assert test="count( cac:AdditionalDocumentReference ) &gt; 0">The ESPDRequest MUST always contain one 'AdditionalDocumentReference' element referring to the Contract Notice (CN) published in TeD (Publications Office). </assert>
	</rule>
	
	<!-- Element: ccv:Criterion / cbc:Name and cbc:Description and cbc:ID -->
	<rule context="/espd-req:ESPDRequest/ccv:Criterion">
		<!-- Validates that the element exists -->
		<assert test="( not(string(cbc:ID))=false() )">The element 'cbc:ID' is mandatory </assert>

		<assert test="( not(string(cbc:Name))=false() )">The element 'cbc:Name' is mandatory </assert>
		
		<assert test="( not(string(cbc:Description))=false() )">The element 'cbc:Description' is mandatory </assert>
		
		<assert test="( not(string(cbc:TypeCode))=false() )">The element 'cbc:TypeCode' is mandatory </assert>
		
		<!-- All Exclusion Criteria MUST provide a value for the element LegislationReference -->
		<assert test="not( (count(ccv:LegislationReference) = 0) and (contains(cbc:TypeCode, 'CRITERION.EXCLUSION.'))  )">All Exclusion Criteria MUST provide a value for the element LegislationReference </assert>
	</rule>

	<!-- Element: ccv:Criterion / RequirementGroup / cbc:ID -->
	<rule context="/espd-req:ESPDRequest/ccv:Criterion/ccv:RequirementGroup">
		<!-- Validates that the element exists -->
		<assert test="( not(string(cbc:ID))=false() )">The element 'cbc:ID' is mandatory </assert>
	</rule>

	<!-- Element: ccv:Criterion / RequirementGroup / Requirement / cbc:Description and cbc:ID and responseDataType -->
	<rule context="/espd-req:ESPDRequest/ccv:Criterion/ccv:RequirementGroup/ccv:Requirement">
		<!-- Validates that the element exists -->
		<assert test="( not(string(cbc:Description))=false() )">The element 'cbc:Description' is mandatory </assert>
		
		<assert test="( not(string(cbc:ID))=false() )">The element 'cbc:ID' is mandatory </assert>
		
		<!-- All the elements Requirement in an XML instance MUST specify the type of data that shall be used for the ESPDResponse in the Requirement attribute ResponseDataType. -->
		<assert test="( not(string(@responseDataType))=false() )">The attribute 'responseDataType' is mandatory </assert>
	</rule>

	<!-- Element: ccv:Criterion / ccv:LegislationReference / sub-elements -->
	<rule context="/espd-req:ESPDRequest/ccv:Criterion/ccv:LegislationReference">
		<!-- Validates that the element exists -->
		<assert test="( not(string(cbc:URI))=false() )">The element 'ccv-cbc:URI' is mandatory </assert>
		
		<assert test="( not(string(ccv-cbc:Article))=false() )">The element 'ccv-cbc:Article' is mandatory </assert>
		
		<assert test="( not(string(ccv-cbc:JurisdictionLevelCode))=false() )">The element 'ccv-cbc:JurisdictionLevelCode' is mandatory </assert>
		
		<assert test="( not(string(ccv-cbc:Title))=false() )">The element 'ccv-cbc:Title' is mandatory </assert>
		
		<assert test="( not(string(cbc:Description))=false() )">The element 'cbc:Description' is mandatory </assert>		
	</rule>
	
	<!--@schemeID must have the value 'CriterionRelatedIDs'; @schemeVersionID must be '1.0'; @schemeAgencyID must have the value 'EU-COM-GROW -->
	<rule context="ccv:RequirementGroup/cbc:ID | ccv:RequirementGroup/ccv:Requirement/cbc:ID">
		<assert test="( not(@schemeAgencyID!='EU-COM-GROW') )">The value of the attribute 'schemeAgencyID' must be 'EU-COM-GROW' </assert>
		<assert test="( not(@schemeID!='CriterionRelatedIDs') )">The value of the attribute 'schemeID' must be 'CriterionRelatedIDs' </assert>
		<assert test="( not(@schemeVersionID!='1.0') )">The value of the attribute 'schemeVersionID' must be '1.0' </assert>
	</rule>
	
	<!--@schemeID must have the value 'CriterionRelatedIDs'; @schemeVersionID must be '1.0'; @schemeAgencyID must have the value 'EU-COM-GROW -->
	<rule context="ccv:Criterion/cbc:ID">
		<assert test="( not(@schemeAgencyID!='EU-COM-GROW') )">The value of the attribute 'schemeAgencyID' must be 'EU-COM-GROW' </assert>
	</rule>
	
	<!-- The AdditionalDocumentReference referring to the CN published in TeD MUST use the element ID to identify the CN. The value of the ID MUST follow the pattern YYYY/S DDD-DDDDDD, where 'YYYY' is a year, '/S' is a constant label, and 'D' represent digits. Beware of the existence of a space (a blank) between the 'S' and the first 'D'. -->
	<rule context="/espd-req:ESPDRequest/cac:AdditionalDocumentReference">
		<!-- The AdditionalDocumentReference referring to the CN published in TeD MUST use the element ID to identify the CN. -->
		<assert test="( not(string(cbc:ID))=false() )">The AdditionalDocumentReference referring to the CN published in TeD MUST use the element ID to identify the CN. </assert>
		
		<!-- The value of the ID MUST follow the pattern YYYY/S DDD-DDDDDD, where 'YYYY' is a year, '/S' is a constant label, and 'D' represent digits. Beware of the existence of a space (a blank) between the 'S' and the first 'D'.
		 e.g. 2016/S 003-002226 -->
		<assert test="(count(cbc:ID)=0) or not(cbc:DocumentTypeCode/text() = 'TED_CN') or ((count(cbc:ID))=1 and (string-length(cbc:ID)=17 and substring(cbc:ID,5,3)='/S ' and substring(cbc:ID,11,1)='-'))">The value of the ID MUST follow the pattern YYYY/S DDD-DDDDDD, where 'YYYY' is a year, '/S' is a constant label, and 'D' represent digits. Beware of the existence of a space (a blank) between the 'S' and the first 'D'. </assert>
	</rule>
</pattern>
</schema>